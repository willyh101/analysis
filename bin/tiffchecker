#!/usr/bin/env python
"""
CLI-based checker for junk tiffs that ScanImage occasionally creates.
"""
from pathlib import Path
import argparse
from tqdm import tqdm
from dotenv import load_dotenv
import os

load_dotenv()

SZ_THRESHOLD_MB = 10
# BASE_PATH = '/mnt/hdd/data2/experiments'
BASE_PATH = Path(os.getenv('TIFF_BASE'))

def check_tiffs(search_path: Path, sz_threshold_mb: int) -> list[Path]:
    """
    Check the tiff files in the given search path and return a list of tiff files
    that are smaller than the specified size threshold.

    Args:
        search_path (Path): The path to search for tiff files.
        sz_threshold_mb (int): The size threshold in megabytes.

    Returns:
        List[Path]: A list of tiff files that are smaller than the size threshold.
    """
    sz_threshold = sz_threshold_mb * 1024 * 1024
    fs = sorted(search_path.rglob('*.tif*'))
    silence = not VERBOSE
    
    junk = []
    for f in tqdm(fs, desc='Checking tiffs', disable=silence):
        sz = f.stat().st_size
        if sz < sz_threshold:
            junk.append(f)
            
    if VERBOSE:
        print(f'Found {len(junk)} bad tiffs.')
        
    return junk

def del_tiffs(tiff_list: list[Path], dry_run=True):
    """
    Delete the specified TIFF files.

    Args:
        tiff_list (list[Path]): A list of Path objects representing the TIFF files to be deleted.
        dry_run (bool, optional): If True, perform a dry run without actually deleting the files. Defaults to True.
    """
    if VERBOSE and dry_run:
        print('----DRY RUN----')
    if len(tiff_list) == 0:
        print('Nothing to delete.')
    else:
        for f in tiff_list:
            if VERBOSE:
                print(f'Deleted: {f}')
            if not dry_run:
                f.unlink()
    if VERBOSE and dry_run:
        print('----DRY RUN----')
                
def make_verify_path(root, mouse, date):
    search_path = Path(root, mouse, date)
    if search_path.exists():
        if VERBOSE:
            print(f'Searching {search_path}...')
        return search_path
    else:
        raise FileNotFoundError(f"Can't fine the path specified: {search_path}")
    
def main():
        
    parser = argparse.ArgumentParser(description='Scan tiffs for junk files. Searches by file size.')

    parser.add_argument('mouse', type=str)
    parser.add_argument('date', type=str)
    
    parser.add_argument('-v', '--verbose', 
                        help='print verbosely', 
                        action='store_true')

    parser.add_argument('--dryrun', 
                        help='runs but does not delete anything',
                        action='store_true')

    parser.add_argument('--root',
                        help='root directory to use',
                        default=BASE_PATH)

    parser.add_argument('--size',
                        help='threshold file size in MB',
                        default=SZ_THRESHOLD_MB,
                        type=int)

    args = parser.parse_args()
    
    global VERBOSE 
    VERBOSE = args.verbose
    
    search_path = make_verify_path(args.root, args.mouse, args.date)
    junk_list = check_tiffs(search_path, args.size)
    del_tiffs(junk_list, dry_run=args.dryrun)
    
if __name__ == '__main__':
    main()